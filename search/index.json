[{"content":"The device I bought a device called AISpeaker S26. In the picture, it looked very similar to Sonoff S26. When I disassembled it, I found out I was right, it\u0026rsquo;s just rebranded Sonoff S26 and the S26 marker in the name was not just a coincidence. That also means that instructions in this post can be used for Sonoff.\nFirst impression Right after took the PCB out, I noticed the wires aren\u0026rsquo;t soldered very well, so the first thing I had to do was to solder them properly.\nThe device also contains custom firmware. This does not bother me much, since I wanted to re-flash the firmware anyway, so I would be able to connect it to my Home Assistant.\nWiring Odroid C4 pinout AISpeaker S26 Odroid C4 Power 3.3V 3.3V (pin 1) Ground GND GND (pin 6) UART ERX TX (pin 8) UART ETX RX (pin 10) Reset pin J4 GND Note The RX and TX wires must be crossed, it\u0026rsquo;s not a mistake. Install ESPHome First, we need to create new Python virtual environment and then install esphome using pip module. To do that, run the following commands on Odroid:\n1 2 3 4 5 6 7 mkdir ~/esphome cd ~/esphome python3 -m venv . source ./bin/activate python3 -m pip install -U wheel setuptools pip python3 -m pip install esphome Create ESP Home config Create new file called secrets.yaml and set all necessary passwords and secrets:\n1 2 3 4 5 6 # secrets.yaml wifi_ssid: \u0026lt;Your WiFi network name\u0026gt; wifi_password: \u0026lt;wifi_password\u0026gt; api_password: \u0026lt;api_password\u0026gt; api_encryption: \u0026lt;api_encryption_secret\u0026gt; ota_password: \u0026lt;ota_password\u0026gt; Example config (source):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 # aispeaker-s26.yaml esphome: name: ai-speaker-s26 platform: ESP8266 board: esp01_1m board_flash_mode: dout wifi: ssid: !secret wifi_ssid password: !secret wifi_password manual_ip: static_ip: 192.168.0.100 gateway: 192.168.0.1 subnet: 255.255.255.0 status_led: pin: number: GPIO13 inverted: false logger: api: password: !secret api_password encryption: key: !secret api_encryption ota: password: !secret ota_password web_server: binary_sensor: - platform: gpio pin: number: GPIO0 mode: INPUT_PULLUP inverted: True name: \u0026#34;AISpeaker S26 - Button\u0026#34; on_press: - switch.toggle: relay - platform: status name: \u0026#34;AISpeaker S26 - Status\u0026#34; sensor: - platform: wifi_signal name: \u0026#34;AISpeaker S26 - WiFi Signal\u0026#34; update_interval: 60s switch: - platform: gpio name: \u0026#34;AISpeaker S26 - Relay\u0026#34; pin: GPIO12 id: \u0026#34;relay\u0026#34; - platform: restart name: \u0026#34;AISpeaker S26 - Restart\u0026#34; Flashing the firmware Connect the ERX, ETX and GND wires to correct pins on Odroid Connect the J4 pin to GND pin on Odroid Connect the 3.3V pin to 3.3V pin on Odroid If everything goes right, no LEDs should be blinking Note If any LED blinks or lights on S26, the device booted to normal mode. Disconnect the power and J4 wires and repeat steps 2 and 3. On Odroid, compile and flash the firmware using command esphome run --device /dev/ttyAML1 aispeaker-s26.yaml.\nWhen the firmware is uploaded to the device, esphome will try to reset the device to the normal mode. Unfortunately, this doesn\u0026rsquo;t work so you have to reset the device manually. Just disconnect and reconnect the power wire (the 3.3V) to restart the device. This time, J4 pin must NOT be connected.\nIf everything goes well, you should see the firmware booting output in terminal.\n","date":"2022-10-27T00:00:00+01:00","permalink":"https://liborburda.github.io/posts/2022-10-27-flashing-aispeaker-s26/","title":"Flashing ESPHome to AISpeaker S26"}]